#!/usr/bin/env node

//加载所需要的模块
var http = require('http');
var url = require('url');
var fs = require('fs');
var path = require('path');
var querystring = require('querystring');
let { exec } = require("child_process")



//1、创建服务；
http.createServer(function(req, res, next) {
    app(req, res)
}).listen(8888, "127.0.0.1", () => {
    exec("start http://127.0.0.1:8888", () => {
        console.log("url:http://127.0.0.1:8888")
        console.log("服务已启动，且在浏览器已经访问")
    })
})


//mime类型
var mime = {
    "css": "text/css",
    "gif": "image/gif",
    "html": "text/html",
    "ico": "image/x-icon",
    "jpeg": "image/jpeg",
    "jpg": "image/jpeg",
    "js": "text/javascript",
    "json": "application/json",
    "pdf": "application/pdf",
    "png": "image/png",
    "svg": "image/svg+xml",
    "swf": "application/x-shockwave-flash",
    "tiff": "image/tiff",
    "txt": "text/plain",
    "wav": "audio/x-wav",
    "wma": "audio/x-ms-wma",
    "wmv": "video/x-ms-wmv",
    "xml": "text/xml",
    "manifest": "text/cache-manifest"
};
//文件读取以及响应函数

function renderFile(res, filePath) {
    let data = fs.readFileSync(filePath, "utf-8")
    let mimeType = path.extname(filePath).substr(1)
    res.writeHead(200, { "content-type": mime[mimeType] + ";charset=utf-8" })
    res.end(data)
}


//服务配置文件
function app(req, res) {

    let currentUrl = url.parse(req.url).pathname


    //根据请求生成文件地址
    let pathUrl = url.parse(req.url)

    let filePath = path.join(process.cwd(), "./", pathUrl.pathname)
        //根据请求地址判断是文件还是文件夹
    fs.stat(filePath, (err, stats) => {
        //判断此路径是否存在，不存在相应404页面
        if (err) {
            res.writeHead(404, { "content-type": "text/html;charset=utf-8" })
            res.end("<h2>文件不存在</h2>")
        }

        //查看err是否已经res.end()
        if (!res.finished) {
            //路径是文件夹，将文件夹中的所有文件和子文件夹显示在页面中
            if (stats.isDirectory()) {
                //页面内容的拼接

                var html = `<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><title>${path.basename(filePath)}</title></head><body><ul>`

                //读取文件夹中所有文件以及文件夹
                fs.readdir(filePath, (err, files) => {
                        if (err) {
                            console.log(err)
                            html += `<li>地址错误</li></ul></body></html>`
                        } else {
                            //如果当前文件夹中存在index.html则直接响应html，不展示文件夹中内容
                            let state = files.some((i) => {
                                if (i == "index.html") {
                                    return true
                                } else {
                                    if (pathUrl.pathname.slice(pathUrl.pathname.length - 1) == "/") {
                                        var aPath = pathUrl.pathname + i
                                    } else {
                                        var aPath = pathUrl.pathname + "/" + i
                                    }

                                    html += `<li><a href="${aPath}">${i}</a></li>`
                                    return false
                                }
                            });
                            //如果state为true，则index.html存在，直接找到index.html的路径进行文件响应
                            if (state) {
                                var aPath = path.join(filePath, "./index.html")

                                renderFile(res, aPath)
                            } else {
                                //如果state不为true，则继续拼接页面
                                html += `</ul></body></html>`
                            }

                        }
                        //检测是否当前请求已经响应，如果响应则有index.html,如果还未响应则没有index。html，进行文件内容的展示
                        if (!res.finished) {
                            res.writeHead(200, { "content-type": "text/html" + ";charset=utf-8" })
                            res.end(html)
                        }

                    })
                    //路径为文件，直接执行响应函数
            } else {

                renderFile(res, filePath)
            }
        }



    })


}


//帮助命令的使用
var program = require('commander');
program
    .usage('<command> [options]')
    .description("静态服务器")
    .action(() => {
        console.log("创建一个静态服务器")
    })
    .version('1.0.4')

program.on('--help', () => {

    let useConfig = `
    
    # staticapis 
   
    ## 介绍：
    
    >可以实现服务的启动,静态服务器；
    
    ## 作者：
    
    >陈元广
    
    
    ## 查看node版本：
    
        "必须保证node在7.3以上版本"
    
    ## 创建项目：
    
        cd [project-name]   #项目根目录

        staticser
    
    example：
    
        cd projectTest

        staticser

    `
    console.log(useConfig)
})
program.parse(process.argv);